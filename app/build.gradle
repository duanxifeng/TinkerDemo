apply plugin: 'com.android.application'

apply from: '../config/resguard.gradle'
apply from: '../config/tinker.gradle'

def cfg = rootProject.ext.android // 工程配置
def libs = rootProject.ext.dependencies // 库依赖

static def buildTime() {
    def formattedDate = new Date().format('yyyyMMdd')
    return formattedDate
}

android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion
    defaultConfig {
        applicationId "com.dragon.tinkerdemo"
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //用git commit作为版本号
        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
        //将版本号作为tinerId
//        buildConfigField "String", "TINKER_ID", "\"${cfg.versionCode}\""

    }

    dexOptions {
        jumboMode = true
    }

    signingConfigs {
        release {
            try {
                storeFile file("release.keystore")
                storePassword "testres"
                keyAlias "testres"
                keyPassword "testres"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }

            v2SigningEnabled false
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            //签名文件
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk') && 'release' == variant.buildType.name) {
                def apkFile = new File(output.outputFile.getParent(), "${appName}_v${variant.versionName}_${buildTime()}.apk")
                output.outputFile = apkFile
            }
        }
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile libs["junit"]
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile libs["appcompat-v7"]
    compile project(':tinkerlib')

    compile libs["titlebar"]

    compile 'com.qmuiteam:qmui:1.0.3'
}


def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}