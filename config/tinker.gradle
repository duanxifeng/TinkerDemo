def cfg = rootProject.ext.android
//修正版本显示为v2.1.1
def versionNamePrefix = "v${cfg.versionName}"
//def bakPath = file("${buildDir.parent}/tinkerBackup/")
//备份文件夹显位置
def bakPath = file("${rootDir}/tinkerBackup/")
//AndResguard生成的文件位置
def bakResguardVersion = file("${bakPath}")
def bakResguard = file("${bakPath}/${versionNamePrefix}")
//是否需要备份
def isNeedBackup = true

task AtinkerPatchPrepare {
    doLast {
        isNeedBackup = false
        def backUpVersion = ""
        if (new File("${bakResguardVersion}/version.txt").exists()) {
            backUpVersion = new File("${bakResguardVersion}/version.txt").getText()
        }

        if (!backUpVersion.isEmpty()) {
            println("------------app version : + ${bakResguardVersion} \n")
            project.tinkerPatch.oldApk = "${bakResguard}/${backUpVersion}.apk"
            project.tinkerPatch.buildConfig.applyResourceMapping = "${bakResguard}/${backUpVersion}_R.txt"
            project.andResGuard.mappingFile = file("${bakResguard}/resource_mapping_${backUpVersion}.txt")
        }
    }
}

/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = true
    appName = "TinkerDemo"
    //for normal build
    //old apk file to build patch apk
    tinkerOldApkPath = ""
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = ""
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = ""

    //only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = ""
}


def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        /**
         * necessary，default 'null'
         * the old apk path, use to diff with the new apk to build
         * add apk from the build/bakApk
         */
        oldApk = getOldApkPath()
        /**
         * optional，default 'false'
         * there are some cases we may get some warnings
         * if ignoreWarning is true, we would just assert the patch process
         * case 1: minSdkVersion is below 14, but you are using dexMode with raw.
         *         it must be crash when load.
         * case 2: newly added Android Component in AndroidManifest.xml,
         *         it must be crash when load.
         * case 3: loader classes in dex.loader{} are not keep in the main dex,
         *         it must be let tinker not work.
         * case 4: loader classes in dex.loader{} changes,
         *         loader classes is ues to load patch dex. it is useless to change them.
         *         it won't crash, but these changes can't effect. you may ignore it
         * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build
         */
        ignoreWarning = false

        /**
         * optional，default 'true'
         * whether sign the patch file
         * if not, you must do yourself. otherwise it can't check success during the patch loading
         * we will use the sign config with your build type
         */
        useSign = true

        /**
         * optional，default 'true'
         * whether use tinker to build
         */
        tinkerEnable = buildWithTinker()

        /**
         * Warning, applyMapping will affect the normal android build!
         */
        buildConfig {
            /**
             * optional，default 'null'
             * if we use tinkerPatch to build the patch apk, you'd better to apply the old
             * apk mapping file if minifyEnabled is enable!
             * Warning:
             * you must be careful that it will affect the normal assemble build!
             */
            applyMapping = getApplyMappingPath()
            /**
             * optional，default 'null'
             * It is nice to keep the resource id from R.txt file to reduce java changes
             */
            applyResourceMapping = getApplyResourceMappingPath()

            /**
             * necessary，default 'null'
             * because we don't want to check the base apk with md5 in the runtime(it is slow)
             * tinkerId is use to identify the unique base apk when the patch is tried to apply.
             * we can use git rev, svn rev or simply versionCode.
             * we will gen the tinkerId in your manifest automatic
             */
            tinkerId = getTinkerIdValue()

            /**
             * if keepDexApply is true, class in which dex refer to the old apk.
             * open this can reduce the dex diff file size.
             */
            keepDexApply = false

            /**
             * optional, default 'false'
             * Whether tinker should treat the base apk as the one being protected by app
             * protection tools.
             * If this attribute is true, the generated patch package will contain a
             * dex including all changed classes instead of any dexdiff patch-info files.
             */
            isProtectedApp = false
        }

        dex {
            /**
             * optional，default 'jar'
             * only can be 'raw' or 'jar'. for raw, we would keep its original format
             * for jar, we would repack dexes with zip format.
             * if you want to support below 14, you must use jar
             * or you want to save rom or check quicker, you can use raw mode also
             */
            dexMode = "jar"

            /**
             * necessary，default '[]'
             * what dexes in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * necessary，default '[]'
             * Warning, it is very very important, loader classes can't change with patch.
             * thus, they will be removed from patch dexes.
             * you must put the following class into main dex.
             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
             * own tinkerLoader, and the classes you use in them
             *
             */
            loader = []
        }

        lib {
            /**
             * optional，default '[]'
             * what library in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * for library in assets, we would just recover them in the patch directory
             * you can get them in TinkerLoadResult with Tinker
             */
            pattern = ["lib/*/*.so"]
        }

        res {
            /**
             * optional，default '[]'
             * what resource in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * you must include all your resources in apk here,
             * otherwise, they won't repack in the new apk resources.
             */
            pattern = ["res/*", "r/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * optional，default '[]'
             * the resource file exclude patterns, ignore add, delete or modify resource change
             * it support * or ? pattern.
             * Warning, we can only use for files no relative with resources.arsc
             */
            ignoreChange = ["assets/sample_meta.txt"]

            /**
             * default 100kb
             * for modify resource, if it is larger than 'largeModSize'
             * we would like to use bsdiff algorithm to reduce patch file size
             */
            largeModSize = 100
        }

        packageConfig {
            /**
             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
             * package meta file gen. path is assets/package_meta.txt in patch file
             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
             * or TinkerLoadResult.getPackageConfigByName
             * we will get the TINKER_ID from the old apk manifest for you automatic,
             * other config files (such as patchMessage below)is not necessary
             */
            configField("patchMessage", "tinker is sample to use")
            /**
             * just a sample case, you can use such as sdkVersion, brand, channel...
             * you can parse it in the SamplePatchListener.
             * Then you can use patch conditional!
             */
            configField("platform", "all")
            /**
             * patch version via packageConfig
             */
            configField("patchVersion", "1.0")
        }
        //or you can add config filed outside, or get meta value from old apk
        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
        //project.tinkerPatch.packageConfig.configField("test2", "sample")

        /**
         * if you don't use zipArtifact or path, we just use 7za to try
         */
        sevenZip {
            /**
             * optional，default '7za'
             * the 7zip artifact path, it will use the right 7za with your platform
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.2.3"
            /**
             * optional，default '7za'
             * you can specify the 7za path yourself, it will overwrite the zipArtifact value
             */
//        path = "/usr/local/bin/7za"
        }
    }

    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->

        def taskName = variant.name
        //构建类型名称
        def buildTypeName = variant.buildType.name

        def date = new Date().format("MMdd-HH-mm-ss")
        def orgAndresPrefix = "AndResGuard_${appName}_${versionNamePrefix}_${(buildTime())}"
        def orgApkPrefix = "${appName}_${versionNamePrefix}_${buildTime()}"
        def targetApkPrefix = "${appName}_${versionNamePrefix}_${date}"

        tasks.all {
            if (buildTypeName == 'release') {

                def backUpVersion = ""
                if (new File("${bakResguardVersion}/version.txt").exists()) {
                    backUpVersion = new File("${bakResguardVersion}/version.txt").getText()
                }
                if ("tinkerPatch${buildTypeName}".equalsIgnoreCase(it.name)) {
                    def resguardTask
                    tasks.all {
                        if (it.name.equalsIgnoreCase("resguard${taskName.capitalize()}")) {
                            resguardTask = it
                        }
                    }

                    it.doFirst({
                        // change build apk path
                        it.buildApkPath = "${buildDir}/outputs/apk/${orgAndresPrefix}/${orgApkPrefix}_signed_7zip_aligned.apk"
                        project.android.ext.tinkerOldApkPath = "${bakResguard}/${backUpVersion}.apk"
                        project.android.ext.tinkerApplyResourcePath = "${bakResguard}/${backUpVersion}_R.txt"
                    })
                    it.dependsOn AtinkerPatchPrepare
                    it.dependsOn resguardTask
                }

                if ("resguard${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
                    if (!backUpVersion.isEmpty() && new File("${backUpVersion}_mapping.txt").exists()) {
                        ext.andResMappingFile = new File("${backUpVersion}_mapping.txt")
                    } else {
                        ext.andResMappingFile = null
                    }
                    it.doLast {
                        if (!isNeedBackup) {
                            return 0
                        }

                        //backUpVersion
                        File version = new File("${bakResguardVersion}/version.txt")
                        if (!version.parentFile.exists()) {
                            version.parentFile.mkdir()
                        }
                        version.write("${targetApkPrefix}")

                        // 目标文件夹
                        File intoFileDir = file(bakResguard.absolutePath)
                        //对于同一版本,如果存在一个备份,先删除备份
                        if (intoFileDir.exists()){
                            delete(intoFileDir)
                        }
                        copy {
                            from "${buildDir}/outputs/apk/${orgAndresPrefix}/${orgApkPrefix}_signed_7zip_aligned.apk"
                            into intoFileDir
                            rename { String fileName ->
                                try {
                                    fileName.replace("${orgApkPrefix}_signed_7zip_aligned.apk", "${targetApkPrefix}.apk")
                                } catch (Exception e) {
                                    print "rename apk mapping error"
                                    e.printStackTrace()
                                }
                            }
                            from "${buildDir}/outputs/mapping/${taskName}/mapping.txt"
                            into intoFileDir
                            rename { String fileName ->
                                fileName.replace("mapping.txt", "${targetApkPrefix}_mapping.txt")
                            }

                            from "${buildDir}/intermediates/symbols/${taskName}/R.txt"
                            into intoFileDir
                            rename { String fileName ->
                                fileName.replace("R.txt", "${targetApkPrefix}_R.txt")
                            }

                            from "${buildDir}/outputs/apk/${orgAndresPrefix}/resource_mapping_${orgApkPrefix}.txt"
                            into intoFileDir
                            rename { String fileName ->
                                try {
                                    fileName.replace("resource_mapping_${orgApkPrefix}.txt", "resource_mapping_${targetApkPrefix}.txt")
                                } catch (Exception e) {
                                    print "rename resource mapping error"
                                    e.printStackTrace()
                                }
                            }
                            print "one resguard backup tinker base apk ok! \n"
                        }
//                        packageChannel("${buildDir}/outputs/apk/${orgAndresPrefix}/${orgApkPrefix}_signed_7zip_aligned.apk")
                    }
                }
            }
        }
    }
}